'solc --version' running
'solc contracts/VulnerableBank.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/runner/work/TestSlither/TestSlither/contracts' running
Compilation warnings/errors on contracts/VulnerableBank.sol:
Warning: "selfdestruct" has been deprecated. Note that, starting from the Cancun hard fork, the underlying opcode no longer deletes the code and data associated with an account and only transfers its Ether to the beneficiary, unless executed in the same transaction in which the contract was created (see EIP-6780). Any use in newly deployed contracts is strongly discouraged even if the new behavior is taken into account. Future changes to the EVM might further reduce the functionality of the opcode.
  --> contracts/VulnerableBank.sol:53:9:
   |
53 |         selfdestruct(payable(owner));
   |         ^^^^^^^^^^^^


INFO:Detectors:
VulnerableBank.isLuckyTime() (contracts/VulnerableBank.sol#57-59) uses a weak PRNG: "block.timestamp % 2 == 0 (contracts/VulnerableBank.sol#58)" 
VulnerableBank.randomNumber() (contracts/VulnerableBank.sol#62-64) uses a weak PRNG: "uint256(keccak256(bytes)(abi.encodePacked(block.timestamp,block.prevrandao,msg.sender))) % 100 (contracts/VulnerableBank.sol#63)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG
INFO:Detectors:
Reentrancy in VulnerableBank.withdraw(uint256) (contracts/VulnerableBank.sol#34-44):
	External calls:
	- (success,None) = msg.sender.call{value: _amount}() (contracts/VulnerableBank.sol#38)
	State variables written after the call(s):
	- balances[msg.sender] -= _amount (contracts/VulnerableBank.sol#41)
	VulnerableBank.balances (contracts/VulnerableBank.sol#10) can be used in cross function reentrancies:
	- VulnerableBank.balances (contracts/VulnerableBank.sol#10)
	- VulnerableBank.deposit() (contracts/VulnerableBank.sol#26-31)
	- VulnerableBank.withdraw(uint256) (contracts/VulnerableBank.sol#34-44)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
VulnerableBank.destroy() (contracts/VulnerableBank.sol#52-54) allows anyone to destruct the contract
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#suicidal
INFO:Detectors:
VulnerableBank.isLuckyTime() (contracts/VulnerableBank.sol#57-59) uses a dangerous strict equality:
	- block.timestamp % 2 == 0 (contracts/VulnerableBank.sol#58)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
VulnerableBank.setOwner(address)._newOwner (contracts/VulnerableBank.sol#22) lacks a zero-check on :
		- owner = _newOwner (contracts/VulnerableBank.sol#23)
VulnerableBank.callExternal(address,bytes)._target (contracts/VulnerableBank.sol#67) lacks a zero-check on :
		- (success,None) = _target.call(_data) (contracts/VulnerableBank.sol#68)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in VulnerableBank.withdraw(uint256) (contracts/VulnerableBank.sol#34-44):
	External calls:
	- (success,None) = msg.sender.call{value: _amount}() (contracts/VulnerableBank.sol#38)
	State variables written after the call(s):
	- totalDeposits -= _amount (contracts/VulnerableBank.sol#42)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in VulnerableBank.withdraw(uint256) (contracts/VulnerableBank.sol#34-44):
	External calls:
	- (success,None) = msg.sender.call{value: _amount}() (contracts/VulnerableBank.sol#38)
	Event emitted after the call(s):
	- Withdrawal(msg.sender,_amount) (contracts/VulnerableBank.sol#43)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
VulnerableBank.isLuckyTime() (contracts/VulnerableBank.sol#57-59) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp % 2 == 0 (contracts/VulnerableBank.sol#58)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess.
It is used by:
	- ^0.8.20 (contracts/VulnerableBank.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in VulnerableBank.withdraw(uint256) (contracts/VulnerableBank.sol#34-44):
	- (success,None) = msg.sender.call{value: _amount}() (contracts/VulnerableBank.sol#38)
Low level call in VulnerableBank.callExternal(address,bytes) (contracts/VulnerableBank.sol#67-70):
	- (success,None) = _target.call(_data) (contracts/VulnerableBank.sol#68)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter VulnerableBank.setOwner(address)._newOwner (contracts/VulnerableBank.sol#22) is not in mixedCase
Parameter VulnerableBank.withdraw(uint256)._amount (contracts/VulnerableBank.sol#34) is not in mixedCase
Parameter VulnerableBank.callExternal(address,bytes)._target (contracts/VulnerableBank.sol#67) is not in mixedCase
Parameter VulnerableBank.callExternal(address,bytes)._data (contracts/VulnerableBank.sol#67) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Slither:contracts/VulnerableBank.sol analyzed (1 contracts with 100 detectors), 17 result(s) found
