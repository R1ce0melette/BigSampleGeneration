'solc --version' running
'solc contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/runner/work/BigSampleGeneration/BigSampleGeneration/contracts/iter6 - Claude4.5/prompt_22' running
INFO:Detectors:
Reentrancy in TokenAirdrop.batchDistribute(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#114-137):
	External calls:
	- (success,None) = recipient.call{value: airdrop.amountPerRecipient}() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#128)
	State variables written after the call(s):
	- airdrop.hasClaimed[recipient] = true (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#125)
	TokenAirdrop.airdrops (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#26) can be used in cross function reentrancies:
	- TokenAirdrop.airdrops (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#26)
	- TokenAirdrop.batchDistribute(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#114-137)
	- TokenAirdrop.claimTokens(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#90-108)
	- TokenAirdrop.closeAirdrop(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#143-152)
	- TokenAirdrop.createAirdrop(string,uint256,address[],uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#50-84)
	- TokenAirdrop.getActiveAirdrops() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#258-277)
	- TokenAirdrop.getAirdrop(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#167-192)
	- TokenAirdrop.getMyEligibleAirdrops() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#283-302)
	- TokenAirdrop.getRecipients(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#199-202)
	- TokenAirdrop.getUnclaimedRecipients(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#231-252)
	- TokenAirdrop.hasClaimed(uint256,address) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#221-224)
	- TokenAirdrop.isEligible(uint256,address) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#210-213)
	- airdrop.claimCount ++ (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#126)
	TokenAirdrop.airdrops (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#26) can be used in cross function reentrancies:
	- TokenAirdrop.airdrops (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#26)
	- TokenAirdrop.batchDistribute(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#114-137)
	- TokenAirdrop.claimTokens(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#90-108)
	- TokenAirdrop.closeAirdrop(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#143-152)
	- TokenAirdrop.createAirdrop(string,uint256,address[],uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#50-84)
	- TokenAirdrop.getActiveAirdrops() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#258-277)
	- TokenAirdrop.getAirdrop(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#167-192)
	- TokenAirdrop.getMyEligibleAirdrops() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#283-302)
	- TokenAirdrop.getRecipients(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#199-202)
	- TokenAirdrop.getUnclaimedRecipients(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#231-252)
	- TokenAirdrop.hasClaimed(uint256,address) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#221-224)
	- TokenAirdrop.isEligible(uint256,address) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#210-213)
	- airdrop.totalDistributed += distributed (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#136)
	TokenAirdrop.airdrops (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#26) can be used in cross function reentrancies:
	- TokenAirdrop.airdrops (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#26)
	- TokenAirdrop.batchDistribute(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#114-137)
	- TokenAirdrop.claimTokens(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#90-108)
	- TokenAirdrop.closeAirdrop(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#143-152)
	- TokenAirdrop.createAirdrop(string,uint256,address[],uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#50-84)
	- TokenAirdrop.getActiveAirdrops() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#258-277)
	- TokenAirdrop.getAirdrop(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#167-192)
	- TokenAirdrop.getMyEligibleAirdrops() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#283-302)
	- TokenAirdrop.getRecipients(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#199-202)
	- TokenAirdrop.getUnclaimedRecipients(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#231-252)
	- TokenAirdrop.hasClaimed(uint256,address) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#221-224)
	- TokenAirdrop.isEligible(uint256,address) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#210-213)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities
INFO:Detectors:
TokenAirdrop.transferOwnership(address) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#335-338) should emit an event for: 
	- owner = newOwner (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#337) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control
INFO:Detectors:
TokenAirdrop.batchDistribute(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#114-137) has external calls inside a loop: (success,None) = recipient.call{value: airdrop.amountPerRecipient}() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#128)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop
INFO:Detectors:
Reentrancy in TokenAirdrop.batchDistribute(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#114-137):
	External calls:
	- (success,None) = recipient.call{value: airdrop.amountPerRecipient}() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#128)
	Event emitted after the call(s):
	- TokensClaimed(airdropId,recipient,airdrop.amountPerRecipient) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#131)
Reentrancy in TokenAirdrop.claimTokens(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#90-108):
	External calls:
	- (success,None) = msg.sender.call{value: airdrop.amountPerRecipient}() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#104)
	Event emitted after the call(s):
	- TokensClaimed(airdropId,msg.sender,airdrop.amountPerRecipient) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#107)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
TokenAirdrop.claimTokens(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#90-108) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(airdrop.isActive,Airdrop is not active) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#94)
	- require(bool,string)(airdrop.expiresAt == 0 || block.timestamp <= airdrop.expiresAt,Airdrop has expired) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#95)
	- require(bool,string)(airdrop.isEligible[msg.sender],Not eligible for this airdrop) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#96)
	- require(bool,string)(! airdrop.hasClaimed[msg.sender],Already claimed) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#97)
	- require(bool,string)(address(this).balance >= airdrop.amountPerRecipient,Insufficient contract balance) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#98)
TokenAirdrop.batchDistribute(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#114-137) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(airdrop.isActive,Airdrop is not active) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#118)
TokenAirdrop.closeAirdrop(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#143-152) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(airdrop.isActive,Airdrop is already closed) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#147)
TokenAirdrop.getMyEligibleAirdrops() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#283-302) uses timestamp for comparisons
	Dangerous comparisons:
	- airdrops[i].isEligible[msg.sender] && airdrops[i].isActive && ! airdrops[i].hasClaimed[msg.sender] (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#287)
	- airdrops[i_scope_0].isEligible[msg.sender] && airdrops[i_scope_0].isActive && ! airdrops[i_scope_0].hasClaimed[msg.sender] (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#295)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in TokenAirdrop.claimTokens(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#90-108):
	- (success,None) = msg.sender.call{value: airdrop.amountPerRecipient}() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#104)
Low level call in TokenAirdrop.batchDistribute(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#114-137):
	- (success,None) = recipient.call{value: airdrop.amountPerRecipient}() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#128)
Low level call in TokenAirdrop.withdrawFunds(uint256) (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#315-321):
	- (success,None) = owner.call{value: amount}() (contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol#319)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Slither:contracts/iter6 - Claude4.5/prompt_22/TokenAirdrop.sol analyzed (1 contracts with 100 detectors), 13 result(s) found
