'solc --version' running
'solc contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/home/runner/work/BigSampleGeneration/BigSampleGeneration/contracts/iter8 - Claude4.5/prompt_27' running
Compilation warnings/errors on contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol:
Warning: This declaration shadows an existing declaration.
   --> contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol:318:40:
    |
318 |     function _removeTokenFromOwnerList(address owner, uint256 tokenId) private {
    |                                        ^^^^^^^^^^^^^
Note: The shadowed declaration is here:
  --> contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol:39:5:
   |
39 |     address public owner;
   |     ^^^^^^^^^^^^^^^^^^^^

Warning: Contract code size is 30799 bytes and exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
 --> contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol:8:1:
  |
8 | contract NFTCertificate {
  | ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
NFTCertificate._compareStrings(string,string) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#571-573) uses a dangerous strict equality:
	- keccak256(bytes)(abi.encodePacked(a)) == keccak256(bytes)(abi.encodePacked(b)) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#572)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
NFTCertificate._removeTokenFromOwnerList(address,uint256).owner (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#318) shadows:
	- NFTCertificate.owner (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#39) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
NFTCertificate.transferOwnership(address) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#664-672) should emit an event for: 
	- owner = newOwner (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#671) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control
INFO:Detectors:
NFTCertificate.mintCertificate(address,string,string,string,string,string,uint256) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#105-153) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(expiryDate > block.timestamp,Expiry date must be in the future) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#120)
NFTCertificate.revokeCertificate(uint256) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#232-246) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(! certificates[tokenId].revoked,Certificate already revoked) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#237)
NFTCertificate.updateMetadata(uint256,string) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#253-263) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(! certificates[tokenId].revoked,Cannot update revoked certificate) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#258)
NFTCertificate.transferFrom(address,address,uint256) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#271-301) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(! certificates[tokenId].revoked,Cannot transfer revoked certificate) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#283)
NFTCertificate.isCertificateValid(uint256) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#475-492) uses timestamp for comparisons
	Dangerous comparisons:
	- cert.expiryDate > 0 && block.timestamp > cert.expiryDate (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#487)
NFTCertificate._compareStrings(string,string) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#571-573) uses timestamp for comparisons
	Dangerous comparisons:
	- keccak256(bytes)(abi.encodePacked(a)) == keccak256(bytes)(abi.encodePacked(b)) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#572)
NFTCertificate.getExpiredCertificates() (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#605-627) uses timestamp for comparisons
	Dangerous comparisons:
	- cert.expiryDate > 0 && block.timestamp > cert.expiryDate && ! cert.revoked (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#609)
	- cert_scope_1.expiryDate > 0 && block.timestamp > cert_scope_1.expiryDate && ! cert_scope_1.revoked (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#620)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
NFTCertificate.mintCertificate(address,string,string,string,string,string,uint256) (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#105-153) has costly operations inside a loop:
	- tokenIdCounter ++ (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#123)
	Calls stack containing the loop:
		NFTCertificate.batchMintCertificates(address[],string[],string[],string[],string,string[],uint256)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Loop condition i < allTokenIds.length (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#581) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i_scope_0 < allTokenIds.length (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#590) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < allTokenIds.length (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#607) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i_scope_0 < allTokenIds.length (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#617) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < allTokenIds.length (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#501) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < allTokenIds.length (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#514) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i_scope_0 < allTokenIds.length (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#523) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < allTokenIds.length (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#652) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i < allTokenIds.length (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#545) should use cached array length instead of referencing `length` member of the storage array.
 Loop condition i_scope_0 < allTokenIds.length (contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol#554) should use cached array length instead of referencing `length` member of the storage array.
 Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cache-array-length
INFO:Slither:contracts/iter8 - Claude4.5/prompt_27/NFTCertificate.sol analyzed (1 contracts with 100 detectors), 22 result(s) found
