name: Slither Security Analysis

on:
  push:
    branches: [ main ]
    paths: 
      - 'contracts/**/*.sol'
  pull_request:
    branches: [ main ]
    paths:
      - 'contracts/**/*.sol'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  slither-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Preparing package
      run: |
        find contracts -name "package-lock.json" | while read lockfile; do
          if [ -f "$lockfile" ]; then
            echo "Installing dependencies in $(dirname "$lockfile")"
            (cd "$(dirname "$lockfile")" && npm ci)
          fi
        done
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install Slither
      run: |
        pip install slither-analyzer
        # Install solc-select for better version management
        pip install solc-select
        
    - name: Install and Set Solidity Compiler
      run: |
        # Install the latest stable version
        solc-select install 0.8.28
        solc-select use 0.8.28
        
    - name: Verify Solidity Installation
      run: solc --version
      
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Run Slither Analysis
      run: |
        # Create reports directory
        mkdir -p reports
        # Find all Solidity files recursively under contracts/
        find contracts/ -name "node_modules" -type d -prune -o -name "*.sol" -type f -print | while read contract; do
          echo "Analyzing $contract..."
          
          # Extract just the filename without path and extension for report naming
          contract_name=$(basename "$contract" .sol)
          
          # Get the relative path to use as a unique identifier
          relative_path=$(echo "$contract" | sed 's|contracts/||' | sed 's|/|_|g' | sed 's|\.sol$||')

          # --- Dynamic Remapping Logic ---
          contract_dir=$(dirname "$contract")
          node_modules_path="$contract_dir/node_modules"
          remaps_arg=""
          
          if [ -d "$node_modules_path" ]; then
            echo "Found node_modules in $contract_dir. Generating remappings..."
            remaps=""
            for item in "$node_modules_path"/*; do
              if [ -d "$item" ]; then
                dep_name=$(basename "$item")
                if [[ "$dep_name" == @* ]]; then
                  # Handle scoped packages like @openzeppelin
                  for scoped_item in "$item"/*; do
                    if [ -d "$scoped_item" ]; then
                      scoped_dep_name=$(basename "$scoped_item")
                      remaps="$remaps $dep_name/$scoped_dep_name=$scoped_item"
                    fi
                  done
                else
                  # Handle regular packages
                  remaps="$remaps $dep_name=$item"
                fi
              fi
            done
            
            if [ -n "$remaps" ]; then
              remaps_arg="--solc-remaps \"$remaps\""
              echo "Generated remappings: $remaps_arg"
            fi
          fi
          # --- End Dynamic Remapping Logic ---
                    
          # Run Slither with text output for human readability.
          # The `eval` is used to correctly handle the quoted remappings argument.
          eval slither '"$contract"' $remaps_arg > '"../reports/${relative_path}_slither_report.txt"' 2>&1 || true
          
          echo "Analysis completed for $contract"
        done
        
    - name: Upload Slither Reports
      uses: actions/upload-artifact@v4
      with:
        name: slither-reports
        path: reports/
        
    - name: Commit Reports to Repository
      if: github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git pull 
        git add reports/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update Slither analysis reports [skip ci]"
          git push
        fi
        
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read all report files
          const reportsDir = 'reports';
          let comment = '## Slither Static Code Analysis Results\n\n';
          
          if (fs.existsSync(reportsDir)) {
            const files = fs.readdirSync(reportsDir);
            const txtFiles = files.filter(f => f.endsWith('.txt'));
            
            if (txtFiles.length > 0) {
              for (const file of txtFiles) {
                const content = fs.readFileSync(path.join(reportsDir, file), 'utf8');
                const contractName = file.replace('_slither_report.txt', '');
                
                comment += `### ${contractName}\n\n`;
                comment += '```\n';
                comment += content.substring(0, 2000); // Limit content length
                if (content.length > 2000) {
                  comment += '\n... (truncated, see full report in artifacts)';
                }
                comment += '\n```\n\n';
              }
            } else {
              comment += 'No issues found or no contracts to analyze.\n';
            }
          } else {
            comment += 'No reports generated.\n';
          }
          
          comment += '\nFull reports are available in the workflow artifacts.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
